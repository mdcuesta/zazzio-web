"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _JwtGenerator = require('./JwtGenerator');

var _JwtGenerator2 = _interopRequireDefault(_JwtGenerator);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Right now only key/secret credentials are supported.
 * However, in time JWT will also be supported.
 * The `Credentials` object provides an abstraction to this.
 *
 * @param {string} apiKey - A Nexmo API Key
 * @param {string} apiSecret - A Nexmo API Secret
 * @param {string|Buffer} [privateKey] -  When a string value is passed it should
 *                        represent the path to the private key. If a Buffer is
 *                        passed then it should be the key read from the file system.
 */

var Credentials = function () {
  function Credentials(apiKey, apiSecret, privateKey, applicationId) {
    _classCallCheck(this, Credentials);

    this.apiKey = apiKey;
    this.apiSecret = apiSecret;

    this.privateKey = null;
    this.applicationId = applicationId;

    if (privateKey instanceof Buffer) {
      this.privateKey = privateKey;
    } else if (privateKey !== undefined) {
      if (!_fs2.default.existsSync(privateKey)) {
        throw new Error('File "' + privateKey + '" not found.');
      }
      this.privateKey = _fs2.default.readFileSync(privateKey);
    }

    /** @private */
    this._jwtGenerator = new _JwtGenerator2.default();
  }

  /**
   * Generate a Jwt using the Private Key in the Credentials.
   * By default the credentials.applicationId will be used when creating the token.
   * However, this can be overwritten.
   *
   * @param {string} [applicationId] an application ID to be used instead of the
   *                default Credentials.applicationId value.
   *
   * @returns {string} The generated JWT
   */


  _createClass(Credentials, [{
    key: 'generateJwt',
    value: function generateJwt() {
      var applicationId = arguments.length <= 0 || arguments[0] === undefined ? this.applicationId : arguments[0];

      var token = this._jwtGenerator.generate(this.privateKey, applicationId);
      return token;
    }

    /**
     * @private
     * Used for testing purposes only.
     */

  }, {
    key: '_setJwtGenerator',
    value: function _setJwtGenerator(generator) {
      this._jwtGenerator = generator;
    }

    /**
     * Ensures a credentials instance is used.
     * 
     * Key/Secret credentials are only supported at present.
     */

  }], [{
    key: 'parse',
    value: function parse(obj) {
      if (obj instanceof Credentials) {
        return obj;
      } else {
        return new Credentials(obj.apiKey, obj.apiSecret, obj.privateKey, obj.applicationId);
      }
    }
  }]);

  return Credentials;
}();

exports.default = Credentials;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9DcmVkZW50aWFscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7QUFFQTs7OztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztJQWFNLFc7QUFDSix1QkFBWSxNQUFaLEVBQW9CLFNBQXBCLEVBQStCLFVBQS9CLEVBQTJDLGFBQTNDLEVBQTBEO0FBQUE7O0FBQ3hELFNBQUssTUFBTCxHQUFjLE1BQWQ7QUFDQSxTQUFLLFNBQUwsR0FBaUIsU0FBakI7O0FBRUEsU0FBSyxVQUFMLEdBQWtCLElBQWxCO0FBQ0EsU0FBSyxhQUFMLEdBQXFCLGFBQXJCOztBQUVBLFFBQUcsc0JBQXNCLE1BQXpCLEVBQWlDO0FBQy9CLFdBQUssVUFBTCxHQUFrQixVQUFsQjtBQUNELEtBRkQsTUFHSyxJQUFHLGVBQWUsU0FBbEIsRUFBNkI7QUFDaEMsVUFBRyxDQUFDLGFBQUcsVUFBSCxDQUFjLFVBQWQsQ0FBSixFQUErQjtBQUM3QixjQUFNLElBQUksS0FBSixZQUFtQixVQUFuQixrQkFBTjtBQUNEO0FBQ0QsV0FBSyxVQUFMLEdBQWtCLGFBQUcsWUFBSCxDQUFnQixVQUFoQixDQUFsQjtBQUNEOzs7QUFHRCxTQUFLLGFBQUwsR0FBcUIsNEJBQXJCO0FBQ0Q7Ozs7Ozs7Ozs7Ozs7Ozs7a0NBWStDO0FBQUEsVUFBcEMsYUFBb0MseURBQXBCLEtBQUssYUFBZTs7QUFDOUMsVUFBSSxRQUFRLEtBQUssYUFBTCxDQUFtQixRQUFuQixDQUE0QixLQUFLLFVBQWpDLEVBQTZDLGFBQTdDLENBQVo7QUFDQSxhQUFPLEtBQVA7QUFDRDs7Ozs7Ozs7O3FDQU1nQixTLEVBQVc7QUFDMUIsV0FBSyxhQUFMLEdBQXFCLFNBQXJCO0FBQ0Q7Ozs7Ozs7Ozs7MEJBT1ksRyxFQUFLO0FBQ2hCLFVBQUcsZUFBZSxXQUFsQixFQUErQjtBQUM3QixlQUFPLEdBQVA7QUFDRCxPQUZELE1BR0s7QUFDSCxlQUFPLElBQUksV0FBSixDQUFnQixJQUFJLE1BQXBCLEVBQTRCLElBQUksU0FBaEMsRUFBMkMsSUFBSSxVQUEvQyxFQUEyRCxJQUFJLGFBQS9ELENBQVA7QUFDRDtBQUNGOzs7Ozs7a0JBR1ksVyIsImZpbGUiOiJDcmVkZW50aWFscy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IEp3dEdlbmVyYXRvciBmcm9tICcuL0p3dEdlbmVyYXRvcic7XG5cbi8qKlxuICogUmlnaHQgbm93IG9ubHkga2V5L3NlY3JldCBjcmVkZW50aWFscyBhcmUgc3VwcG9ydGVkLlxuICogSG93ZXZlciwgaW4gdGltZSBKV1Qgd2lsbCBhbHNvIGJlIHN1cHBvcnRlZC5cbiAqIFRoZSBgQ3JlZGVudGlhbHNgIG9iamVjdCBwcm92aWRlcyBhbiBhYnN0cmFjdGlvbiB0byB0aGlzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcGlLZXkgLSBBIE5leG1vIEFQSSBLZXlcbiAqIEBwYXJhbSB7c3RyaW5nfSBhcGlTZWNyZXQgLSBBIE5leG1vIEFQSSBTZWNyZXRcbiAqIEBwYXJhbSB7c3RyaW5nfEJ1ZmZlcn0gW3ByaXZhdGVLZXldIC0gIFdoZW4gYSBzdHJpbmcgdmFsdWUgaXMgcGFzc2VkIGl0IHNob3VsZFxuICogICAgICAgICAgICAgICAgICAgICAgICByZXByZXNlbnQgdGhlIHBhdGggdG8gdGhlIHByaXZhdGUga2V5LiBJZiBhIEJ1ZmZlciBpc1xuICogICAgICAgICAgICAgICAgICAgICAgICBwYXNzZWQgdGhlbiBpdCBzaG91bGQgYmUgdGhlIGtleSByZWFkIGZyb20gdGhlIGZpbGUgc3lzdGVtLlxuICovXG5jbGFzcyBDcmVkZW50aWFscyB7XG4gIGNvbnN0cnVjdG9yKGFwaUtleSwgYXBpU2VjcmV0LCBwcml2YXRlS2V5LCBhcHBsaWNhdGlvbklkKSB7XG4gICAgdGhpcy5hcGlLZXkgPSBhcGlLZXk7XG4gICAgdGhpcy5hcGlTZWNyZXQgPSBhcGlTZWNyZXQ7XG4gICAgXG4gICAgdGhpcy5wcml2YXRlS2V5ID0gbnVsbDtcbiAgICB0aGlzLmFwcGxpY2F0aW9uSWQgPSBhcHBsaWNhdGlvbklkO1xuICAgIFxuICAgIGlmKHByaXZhdGVLZXkgaW5zdGFuY2VvZiBCdWZmZXIpIHtcbiAgICAgIHRoaXMucHJpdmF0ZUtleSA9IHByaXZhdGVLZXk7XG4gICAgfVxuICAgIGVsc2UgaWYocHJpdmF0ZUtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZighZnMuZXhpc3RzU3luYyhwcml2YXRlS2V5KSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpbGUgXCIke3ByaXZhdGVLZXl9XCIgbm90IGZvdW5kLmApXG4gICAgICB9XG4gICAgICB0aGlzLnByaXZhdGVLZXkgPSBmcy5yZWFkRmlsZVN5bmMocHJpdmF0ZUtleSk7XG4gICAgfVxuICAgIFxuICAgIC8qKiBAcHJpdmF0ZSAqL1xuICAgIHRoaXMuX2p3dEdlbmVyYXRvciA9IG5ldyBKd3RHZW5lcmF0b3IoKTtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgSnd0IHVzaW5nIHRoZSBQcml2YXRlIEtleSBpbiB0aGUgQ3JlZGVudGlhbHMuXG4gICAqIEJ5IGRlZmF1bHQgdGhlIGNyZWRlbnRpYWxzLmFwcGxpY2F0aW9uSWQgd2lsbCBiZSB1c2VkIHdoZW4gY3JlYXRpbmcgdGhlIHRva2VuLlxuICAgKiBIb3dldmVyLCB0aGlzIGNhbiBiZSBvdmVyd3JpdHRlbi5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IFthcHBsaWNhdGlvbklkXSBhbiBhcHBsaWNhdGlvbiBJRCB0byBiZSB1c2VkIGluc3RlYWQgb2YgdGhlXG4gICAqICAgICAgICAgICAgICAgIGRlZmF1bHQgQ3JlZGVudGlhbHMuYXBwbGljYXRpb25JZCB2YWx1ZS5cbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ30gVGhlIGdlbmVyYXRlZCBKV1RcbiAgICovXG4gIGdlbmVyYXRlSnd0KGFwcGxpY2F0aW9uSWQgPSB0aGlzLmFwcGxpY2F0aW9uSWQpIHtcbiAgICB2YXIgdG9rZW4gPSB0aGlzLl9qd3RHZW5lcmF0b3IuZ2VuZXJhdGUodGhpcy5wcml2YXRlS2V5LCBhcHBsaWNhdGlvbklkKTtcbiAgICByZXR1cm4gdG9rZW47XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBVc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuXG4gICAqL1xuICBfc2V0Snd0R2VuZXJhdG9yKGdlbmVyYXRvcikge1xuICAgIHRoaXMuX2p3dEdlbmVyYXRvciA9IGdlbmVyYXRvcjtcbiAgfVxuICBcbiAgLyoqXG4gICAqIEVuc3VyZXMgYSBjcmVkZW50aWFscyBpbnN0YW5jZSBpcyB1c2VkLlxuICAgKiBcbiAgICogS2V5L1NlY3JldCBjcmVkZW50aWFscyBhcmUgb25seSBzdXBwb3J0ZWQgYXQgcHJlc2VudC5cbiAgICovXG4gIHN0YXRpYyBwYXJzZShvYmopIHtcbiAgICBpZihvYmogaW5zdGFuY2VvZiBDcmVkZW50aWFscykge1xuICAgICAgcmV0dXJuIG9iajtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IENyZWRlbnRpYWxzKG9iai5hcGlLZXksIG9iai5hcGlTZWNyZXQsIG9iai5wcml2YXRlS2V5LCBvYmouYXBwbGljYXRpb25JZCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENyZWRlbnRpYWxzO1xuIl19