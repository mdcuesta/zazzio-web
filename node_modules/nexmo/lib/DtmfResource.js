'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Provides access to the `dtmf` resource.
 */

var DtmfResource = function () {
  _createClass(DtmfResource, null, [{
    key: 'PATH',


    /**
     * The path to the `dtmf` resource.
     */
    get: function get() {
      return '/v1/calls/{call_uuid}/dtmf';
    }

    /**
     * Creates a new DtmfResource.
     *
     * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.
     * @param {Object} options - additional options for the class.
     */

  }]);

  function DtmfResource(creds, options) {
    _classCallCheck(this, DtmfResource);

    this.creds = creds;
    this.options = options;
  }

  /**
   * Sends DTMF to a call.
   *
   * @param {Object} params - Parameters used when sending the dtmf to the call. See https://docs.dev.nexmoinc.net/voice/voice-api/api-reference#dtmf_put for more information.
   * @param {function} callback - function to be called when the request completes.
   */


  _createClass(DtmfResource, [{
    key: 'send',
    value: function send(callId, params, callback) {
      var config = {
        host: 'api.nexmo.com',
        path: DtmfResource.PATH.replace('{call_uuid}', callId),
        method: 'PUT',
        body: JSON.stringify(params),
        headers: {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ' + this.creds.generateJwt()
        }
      };
      this.options.httpClient.request(config, callback);
    }
  }]);

  return DtmfResource;
}();

exports.default = DtmfResource;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9EdG1mUmVzb3VyY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7Ozs7O0lBS00sWTs7Ozs7Ozs7d0JBS2M7QUFDaEIsYUFBTyw0QkFBUDtBQUNEOzs7Ozs7Ozs7OztBQVFELHdCQUFZLEtBQVosRUFBbUIsT0FBbkIsRUFBNEI7QUFBQTs7QUFDMUIsU0FBSyxLQUFMLEdBQWEsS0FBYjtBQUNBLFNBQUssT0FBTCxHQUFlLE9BQWY7QUFDRDs7Ozs7Ozs7Ozs7O3lCQVFJLE0sRUFBUSxNLEVBQVEsUSxFQUFVO0FBQzdCLFVBQUksU0FBUztBQUNYLGNBQU0sZUFESztBQUVYLGNBQU0sYUFBYSxJQUFiLENBQWtCLE9BQWxCLENBQTBCLGFBQTFCLEVBQXlDLE1BQXpDLENBRks7QUFHWCxnQkFBUSxLQUhHO0FBSVgsY0FBTSxLQUFLLFNBQUwsQ0FBZSxNQUFmLENBSks7QUFLWCxpQkFBUztBQUNQLDBCQUFnQixrQkFEVDtBQUVQLHVDQUEyQixLQUFLLEtBQUwsQ0FBVyxXQUFYO0FBRnBCO0FBTEUsT0FBYjtBQVVBLFdBQUssT0FBTCxDQUFhLFVBQWIsQ0FBd0IsT0FBeEIsQ0FBZ0MsTUFBaEMsRUFBd0MsUUFBeEM7QUFDRDs7Ozs7O2tCQUlZLFkiLCJmaWxlIjoiRHRtZlJlc291cmNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHF1ZXJ5c3RyaW5nIGZyb20gJ3F1ZXJ5c3RyaW5nJztcblxuLyoqXG4gKiBQcm92aWRlcyBhY2Nlc3MgdG8gdGhlIGBkdG1mYCByZXNvdXJjZS5cbiAqL1xuY2xhc3MgRHRtZlJlc291cmNlIHtcbiAgXG4gIC8qKlxuICAgKiBUaGUgcGF0aCB0byB0aGUgYGR0bWZgIHJlc291cmNlLlxuICAgKi9cbiAgc3RhdGljIGdldCBQQVRIKCkge1xuICAgIHJldHVybiAnL3YxL2NhbGxzL3tjYWxsX3V1aWR9L2R0bWYnO1xuICB9XG4gIFxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBEdG1mUmVzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7Q3JlZGVudGlhbHN9IGNyZWRzIC0gQ3JlZGVudGlhbHMgdXNlZCB3aGVuIGludGVyYWN0aW5nIHdpdGggdGhlIE5leG1vIEFQSS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBhZGRpdGlvbmFsIG9wdGlvbnMgZm9yIHRoZSBjbGFzcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGNyZWRzLCBvcHRpb25zKSB7XG4gICAgdGhpcy5jcmVkcyA9IGNyZWRzO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiBTZW5kcyBEVE1GIHRvIGEgY2FsbC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtIFBhcmFtZXRlcnMgdXNlZCB3aGVuIHNlbmRpbmcgdGhlIGR0bWYgdG8gdGhlIGNhbGwuIFNlZSBodHRwczovL2RvY3MuZGV2Lm5leG1vaW5jLm5ldC92b2ljZS92b2ljZS1hcGkvYXBpLXJlZmVyZW5jZSNkdG1mX3B1dCBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgcmVxdWVzdCBjb21wbGV0ZXMuXG4gICAqL1xuICBzZW5kKGNhbGxJZCwgcGFyYW1zLCBjYWxsYmFjaykge1xuICAgIHZhciBjb25maWcgPSB7XG4gICAgICBob3N0OiAnYXBpLm5leG1vLmNvbScsXG4gICAgICBwYXRoOiBEdG1mUmVzb3VyY2UuUEFUSC5yZXBsYWNlKCd7Y2FsbF91dWlkfScsIGNhbGxJZCksXG4gICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkocGFyYW1zKSxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7dGhpcy5jcmVkcy5nZW5lcmF0ZUp3dCgpfWBcbiAgICAgIH1cbiAgICB9O1xuICAgIHRoaXMub3B0aW9ucy5odHRwQ2xpZW50LnJlcXVlc3QoY29uZmlnLCBjYWxsYmFjayk7XG4gIH1cbiAgXG59XG5cbmV4cG9ydCBkZWZhdWx0IER0bWZSZXNvdXJjZTtcbiJdfQ==