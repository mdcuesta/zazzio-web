'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var https = require('https');
var http = require('http');

var HttpClient = function () {
    function HttpClient(options) {
        _classCallCheck(this, HttpClient);

        this.port = 443 || options.port;
        this.https = options.https || https;
        this.http = options.http || http;
        this.headers = {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'application/json'
        };
        this.logger = options.logger;

        if (options.userAgent) {
            this.headers['User-Agent'] = options.userAgent;
        }
    }

    _createClass(HttpClient, [{
        key: 'request',
        value: function request(endpoint, method, callback) {
            var _this = this;

            if (typeof method == 'function') {
                callback = method;
                endpoint.method = endpoint.method || 'GET';
            } else {
                endpoint.method = method;
            }

            if (endpoint.method == 'POST' || endpoint.method == 'DELETE') {
                // TODO: verify the following fix is required
                // Fix broken due ot 411 Content-Length error now sent by Nexmo API
                // PL 2016-Sept-6 - commented out Content-Length 0
                // headers['Content-Length'] = 0;
            }
            var options = {
                host: endpoint.host ? endpoint.host : 'rest.nexmo.com',
                port: this.port,
                path: endpoint.path,
                method: endpoint.method,
                headers: this.headers
            };

            // Allow existing headers to be overridden
            // Allow new headers to be added
            if (endpoint.headers) {
                Object.keys(endpoint.headers).forEach(function (key) {
                    options.headers[key] = endpoint.headers[key];
                });
            }

            this.logger.info('Request:', options, '\nBody:', endpoint.body);
            var request;

            if (options.port == 443) {
                request = this.https.request(options);
            } else {
                request = http.request(options);
            }

            request.end(endpoint.body);

            var responseReturn = '';
            request.on('response', function (response) {
                response.setEncoding('utf8');
                response.on('data', function (chunk) {
                    responseReturn += chunk;
                });
                response.on('end', function () {
                    _this.logger.info('response ended:', response.statusCode);
                    if (callback) {
                        var retJson = responseReturn;
                        var err = null;
                        if (method !== 'DELETE') {
                            try {
                                retJson = JSON.parse(responseReturn);
                            } catch (parsererr) {
                                // ignore parser error for now and send raw response to client
                                _this.logger.error(parsererr);
                                _this.logger.error('could not convert API response to JSON, above error is ignored and raw API response is returned to client');
                                _this.logger.error('Raw Error message from API ');
                                _this.logger.error(responseReturn);
                                err = parsererr;
                            }
                        }

                        if (response.statusCode < 200 || response.statusCode > 299) {
                            err = retJson;
                        }

                        callback(err, retJson);
                    }
                });
                response.on('close', function (e) {
                    _this.logger.error('problem with API request detailed stacktrace below ');
                    _this.logger.error(e);
                    callback(e);
                });
            });
            request.on('error', function (e) {
                _this.logger.error('problem with API request detailed stacktrace below ');
                _this.logger.error(e);
                callback(e);
            });
        }
    }]);

    return HttpClient;
}();

exports.default = HttpClient;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,