'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _Credentials = require('./Credentials');

var _Credentials2 = _interopRequireDefault(_Credentials);

var _Message = require('./Message');

var _Message2 = _interopRequireDefault(_Message);

var _Voice = require('./Voice');

var _Voice2 = _interopRequireDefault(_Voice);

var _Number = require('./Number');

var _Number2 = _interopRequireDefault(_Number);

var _Verify = require('./Verify');

var _Verify2 = _interopRequireDefault(_Verify);

var _NumberInsight = require('./NumberInsight');

var _NumberInsight2 = _interopRequireDefault(_NumberInsight);

var _App = require('./App');

var _App2 = _interopRequireDefault(_App);

var _Account = require('./Account');

var _Account2 = _interopRequireDefault(_Account);

var _CallsResource = require('./CallsResource');

var _CallsResource2 = _interopRequireDefault(_CallsResource);

var _HttpClient = require('./HttpClient');

var _HttpClient2 = _interopRequireDefault(_HttpClient);

var _NullLogger = require('./NullLogger');

var _NullLogger2 = _interopRequireDefault(_NullLogger);

var _ConsoleLogger = require('./ConsoleLogger');

var _ConsoleLogger2 = _interopRequireDefault(_ConsoleLogger);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Nexmo =
/**
 * @param {Credentials} credentials - Nexmo API credentials
 * @param {string} credentials.apiKey - the Nexmo API key
 * @param {string} credentials.apiSecret - the Nexmo API secret
 * @param {Object} options - Additional options
 * @param {boolean} options.debug - `true` to turn on debug logging
 * @param {Object} options.logger - Set a custom logger.
 * @param {string} options.appendToUserAgent - A value to append to the user agent.
 *                    The value will be prefixed with a `/`
 */
function Nexmo(credentials) {
  var options = arguments.length <= 1 || arguments[1] === undefined ? { debug: false } : arguments[1];

  _classCallCheck(this, Nexmo);

  this.credentials = _Credentials2.default.parse(credentials);
  this.options = options;

  // If no logger has been supplied but debug has been set
  // default to using the ConsoleLogger
  if (!this.options.logger && this.options.debug) {
    this.options.logger = new _ConsoleLogger2.default();
  } else if (!this.options.logger) {
    // Swallow the logging
    this.options.logger = new _NullLogger2.default();
  }

  var userAgent = 'nexmo-node/UNKNOWN/UNKNOWN';
  try {
    var packageDetails = require(__dirname + '/../package.json');
    userAgent = 'nexmo-node/' + packageDetails.version + '/' + process.version;
  } catch (e) {
    console.warn('Could not load package details');
  }
  this.options.userAgent = userAgent;
  if (this.options.appendToUserAgent) {
    this.options.userAgent += '/' + this.options.appendToUserAgent;
  }
  this.options.httpClient = new _HttpClient2.default(this.options);

  this.message = new _Message2.default(this.credentials, this.options);
  this.voice = new _Voice2.default(this.credentials, this.options);
  this.number = new _Number2.default(this.credentials, this.options);
  this.verify = new _Verify2.default(this.credentials, this.options);
  this.numberInsight = new _NumberInsight2.default(this.credentials, this.options);
  this.applications = new _App2.default(this.credentials, this.options);
  this.account = new _Account2.default(this.credentials, this.options);
  this.calls = new _CallsResource2.default(this.credentials, this.options);

  /**
   * @deprecated Please use nexmo.applications
   */
  this.app = this.applications;
};

exports.default = Nexmo;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9OZXhtby5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7OztBQUVBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7Ozs7Ozs7SUFFTSxLOzs7Ozs7Ozs7OztBQVdKLGVBQVksV0FBWixFQUFrRDtBQUFBLE1BQXpCLE9BQXlCLHlEQUFmLEVBQUMsT0FBTSxLQUFQLEVBQWU7O0FBQUE7O0FBQ2hELE9BQUssV0FBTCxHQUFtQixzQkFBWSxLQUFaLENBQWtCLFdBQWxCLENBQW5CO0FBQ0EsT0FBSyxPQUFMLEdBQWUsT0FBZjs7OztBQUlBLE1BQUcsQ0FBQyxLQUFLLE9BQUwsQ0FBYSxNQUFkLElBQXdCLEtBQUssT0FBTCxDQUFhLEtBQXhDLEVBQStDO0FBQzdDLFNBQUssT0FBTCxDQUFhLE1BQWIsR0FBc0IsNkJBQXRCO0FBQ0QsR0FGRCxNQUdLLElBQUcsQ0FBQyxLQUFLLE9BQUwsQ0FBYSxNQUFqQixFQUF5Qjs7QUFFNUIsU0FBSyxPQUFMLENBQWEsTUFBYixHQUFzQiwwQkFBdEI7QUFDRDs7QUFFRCxNQUFJLFlBQVksNEJBQWhCO0FBQ0EsTUFBSTtBQUNGLFFBQUksaUJBQWlCLFFBQVEsWUFBWSxrQkFBcEIsQ0FBckI7QUFDQSxnQ0FBMEIsZUFBZSxPQUF6QyxTQUFvRCxRQUFRLE9BQTVEO0FBQ0QsR0FIRCxDQUlBLE9BQU0sQ0FBTixFQUFTO0FBQ1AsWUFBUSxJQUFSLENBQWEsZ0NBQWI7QUFDRDtBQUNELE9BQUssT0FBTCxDQUFhLFNBQWIsR0FBeUIsU0FBekI7QUFDQSxNQUFHLEtBQUssT0FBTCxDQUFhLGlCQUFoQixFQUFtQztBQUNqQyxTQUFLLE9BQUwsQ0FBYSxTQUFiLFVBQThCLEtBQUssT0FBTCxDQUFhLGlCQUEzQztBQUNEO0FBQ0QsT0FBSyxPQUFMLENBQWEsVUFBYixHQUEwQix5QkFBZSxLQUFLLE9BQXBCLENBQTFCOztBQUVBLE9BQUssT0FBTCxHQUFlLHNCQUFZLEtBQUssV0FBakIsRUFBOEIsS0FBSyxPQUFuQyxDQUFmO0FBQ0EsT0FBSyxLQUFMLEdBQWEsb0JBQVUsS0FBSyxXQUFmLEVBQTRCLEtBQUssT0FBakMsQ0FBYjtBQUNBLE9BQUssTUFBTCxHQUFjLHFCQUFXLEtBQUssV0FBaEIsRUFBNkIsS0FBSyxPQUFsQyxDQUFkO0FBQ0EsT0FBSyxNQUFMLEdBQWMscUJBQVcsS0FBSyxXQUFoQixFQUE2QixLQUFLLE9BQWxDLENBQWQ7QUFDQSxPQUFLLGFBQUwsR0FBcUIsNEJBQWtCLEtBQUssV0FBdkIsRUFBb0MsS0FBSyxPQUF6QyxDQUFyQjtBQUNBLE9BQUssWUFBTCxHQUFvQixrQkFBUSxLQUFLLFdBQWIsRUFBMEIsS0FBSyxPQUEvQixDQUFwQjtBQUNBLE9BQUssT0FBTCxHQUFlLHNCQUFZLEtBQUssV0FBakIsRUFBOEIsS0FBSyxPQUFuQyxDQUFmO0FBQ0EsT0FBSyxLQUFMLEdBQWEsNEJBQWtCLEtBQUssV0FBdkIsRUFBb0MsS0FBSyxPQUF6QyxDQUFiOzs7OztBQUtBLE9BQUssR0FBTCxHQUFXLEtBQUssWUFBaEI7QUFDRCxDOztrQkFHWSxLIiwiZmlsZSI6Ik5leG1vLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZzIGZyb20gJ2ZzJztcblxuaW1wb3J0IENyZWRlbnRpYWxzIGZyb20gJy4vQ3JlZGVudGlhbHMnO1xuaW1wb3J0IE1lc3NhZ2UgZnJvbSAnLi9NZXNzYWdlJztcbmltcG9ydCBWb2ljZSBmcm9tICcuL1ZvaWNlJztcbmltcG9ydCBOdW1iZXIgZnJvbSAnLi9OdW1iZXInO1xuaW1wb3J0IFZlcmlmeSBmcm9tICcuL1ZlcmlmeSc7XG5pbXBvcnQgTnVtYmVySW5zaWdodCBmcm9tICcuL051bWJlckluc2lnaHQnO1xuaW1wb3J0IEFwcCBmcm9tICcuL0FwcCc7XG5pbXBvcnQgQWNjb3VudCBmcm9tICcuL0FjY291bnQnO1xuaW1wb3J0IENhbGxzUmVzb3VyY2UgZnJvbSAnLi9DYWxsc1Jlc291cmNlJztcbmltcG9ydCBIdHRwQ2xpZW50IGZyb20gJy4vSHR0cENsaWVudCc7XG5pbXBvcnQgTnVsbExvZ2dlciBmcm9tICcuL051bGxMb2dnZXInO1xuaW1wb3J0IENvbnNvbGVMb2dnZXIgZnJvbSAnLi9Db25zb2xlTG9nZ2VyJztcblxuY2xhc3MgTmV4bW8ge1xuICAvKipcbiAgICogQHBhcmFtIHtDcmVkZW50aWFsc30gY3JlZGVudGlhbHMgLSBOZXhtbyBBUEkgY3JlZGVudGlhbHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNyZWRlbnRpYWxzLmFwaUtleSAtIHRoZSBOZXhtbyBBUEkga2V5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjcmVkZW50aWFscy5hcGlTZWNyZXQgLSB0aGUgTmV4bW8gQVBJIHNlY3JldFxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIEFkZGl0aW9uYWwgb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMuZGVidWcgLSBgdHJ1ZWAgdG8gdHVybiBvbiBkZWJ1ZyBsb2dnaW5nXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLmxvZ2dlciAtIFNldCBhIGN1c3RvbSBsb2dnZXIuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmFwcGVuZFRvVXNlckFnZW50IC0gQSB2YWx1ZSB0byBhcHBlbmQgdG8gdGhlIHVzZXIgYWdlbnQuXG4gICAqICAgICAgICAgICAgICAgICAgICBUaGUgdmFsdWUgd2lsbCBiZSBwcmVmaXhlZCB3aXRoIGEgYC9gXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjcmVkZW50aWFscywgb3B0aW9ucyA9IHtkZWJ1ZzpmYWxzZX0pIHtcbiAgICB0aGlzLmNyZWRlbnRpYWxzID0gQ3JlZGVudGlhbHMucGFyc2UoY3JlZGVudGlhbHMpO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgXG4gICAgLy8gSWYgbm8gbG9nZ2VyIGhhcyBiZWVuIHN1cHBsaWVkIGJ1dCBkZWJ1ZyBoYXMgYmVlbiBzZXRcbiAgICAvLyBkZWZhdWx0IHRvIHVzaW5nIHRoZSBDb25zb2xlTG9nZ2VyXG4gICAgaWYoIXRoaXMub3B0aW9ucy5sb2dnZXIgJiYgdGhpcy5vcHRpb25zLmRlYnVnKSB7XG4gICAgICB0aGlzLm9wdGlvbnMubG9nZ2VyID0gbmV3IENvbnNvbGVMb2dnZXIoKTtcbiAgICB9XG4gICAgZWxzZSBpZighdGhpcy5vcHRpb25zLmxvZ2dlcikge1xuICAgICAgLy8gU3dhbGxvdyB0aGUgbG9nZ2luZ1xuICAgICAgdGhpcy5vcHRpb25zLmxvZ2dlciA9IG5ldyBOdWxsTG9nZ2VyKCk7XG4gICAgfVxuICAgIFxuICAgIGxldCB1c2VyQWdlbnQgPSAnbmV4bW8tbm9kZS9VTktOT1dOL1VOS05PV04nO1xuICAgIHRyeSB7XG4gICAgICB2YXIgcGFja2FnZURldGFpbHMgPSByZXF1aXJlKF9fZGlybmFtZSArICcvLi4vcGFja2FnZS5qc29uJyk7XG4gICAgICB1c2VyQWdlbnQgPSBgbmV4bW8tbm9kZS8ke3BhY2thZ2VEZXRhaWxzLnZlcnNpb259LyR7cHJvY2Vzcy52ZXJzaW9ufWA7XG4gICAgfVxuICAgIGNhdGNoKGUpIHtcbiAgICAgIGNvbnNvbGUud2FybignQ291bGQgbm90IGxvYWQgcGFja2FnZSBkZXRhaWxzJyk7XG4gICAgfVxuICAgIHRoaXMub3B0aW9ucy51c2VyQWdlbnQgPSB1c2VyQWdlbnQ7XG4gICAgaWYodGhpcy5vcHRpb25zLmFwcGVuZFRvVXNlckFnZW50KSB7XG4gICAgICB0aGlzLm9wdGlvbnMudXNlckFnZW50ICs9IGAvJHt0aGlzLm9wdGlvbnMuYXBwZW5kVG9Vc2VyQWdlbnR9YDtcbiAgICB9XG4gICAgdGhpcy5vcHRpb25zLmh0dHBDbGllbnQgPSBuZXcgSHR0cENsaWVudCh0aGlzLm9wdGlvbnMpXG4gICAgXG4gICAgdGhpcy5tZXNzYWdlID0gbmV3IE1lc3NhZ2UodGhpcy5jcmVkZW50aWFscywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLnZvaWNlID0gbmV3IFZvaWNlKHRoaXMuY3JlZGVudGlhbHMsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5udW1iZXIgPSBuZXcgTnVtYmVyKHRoaXMuY3JlZGVudGlhbHMsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy52ZXJpZnkgPSBuZXcgVmVyaWZ5KHRoaXMuY3JlZGVudGlhbHMsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5udW1iZXJJbnNpZ2h0ID0gbmV3IE51bWJlckluc2lnaHQodGhpcy5jcmVkZW50aWFscywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLmFwcGxpY2F0aW9ucyA9IG5ldyBBcHAodGhpcy5jcmVkZW50aWFscywgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLmFjY291bnQgPSBuZXcgQWNjb3VudCh0aGlzLmNyZWRlbnRpYWxzLCB0aGlzLm9wdGlvbnMpO1xuICAgIHRoaXMuY2FsbHMgPSBuZXcgQ2FsbHNSZXNvdXJjZSh0aGlzLmNyZWRlbnRpYWxzLCB0aGlzLm9wdGlvbnMpO1xuICAgIFxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgbmV4bW8uYXBwbGljYXRpb25zXG4gICAgICovXG4gICAgdGhpcy5hcHAgPSB0aGlzLmFwcGxpY2F0aW9ucztcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBOZXhtbztcbiJdfQ==