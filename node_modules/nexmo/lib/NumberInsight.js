"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NumberInsight = function () {

  /**
   * @param {Credentials} credentials
   *    credentials to be used when interacting with the API.
   * @param {Object} options
   *    Addition NumberInsight options.
   */

  function NumberInsight(credentials) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, NumberInsight);

    this.creds = credentials;
    this.options = options;

    // Used to facilitate testing of the call to the underlying object
    this._nexmo = this.options.nexmoOverride || _index2.default;

    this._nexmo.initialize(this.creds.apiKey, this.creds.apiSecret, this.options);
  }

  /**
   * Get insight on the provided number.
   *
   * @param {Object} options - The options for Number Insight
   * @param {string} options.level - the level of insight: 'basic', 'standard'
   *                 or 'advanced'.
   *                 If no `level` value is provided, or an unrecognised value
   *                 is used, 'basic' level insight will be used.
   * @param {string} options.number - the phone number to retrieve insight on
   * @param {string} options.country - 'basic' and 'standard' only.
   *                 An ISO 3166 Alpha 2 country code
   *                 https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
   * @param {string} options. ip - 'advanced' only.
   *                 The IP address in IPv4 notation of the endpoint the 
   *                 user connected from.
   * @param {Array}  options.features - 'advanced' only.
   *                 An Array detailing the information you want for this phone 
   *                 number. Possible Array elements are:
   *                 - type: number is one of the following: mobile, landline,
   *                          landline_premium or unknown phone number.
   *                 - valid: number exists.
   *                 - reachable: is number available now.
   *                 - carrier: the MCCMNC for the carrier number is registered
   *                             with. This is either: <ISO country code>-FIXED 
   *                             or <ISO country code>-PREMIUM.
   *                 - ported: if the user has changed carrier for number.
   *                 - roaming: the subscriber is outside their home network
   * 
   * @param {string} options.callback - 'advanced' only.
   *                 The callback to be called when the API call completes.
   * @param {Number} options.callback_timeout - 'advanced' only.
   *                 The maximum wait until the Number Insight Return Parameters
   *                 are sent to callback. This is a value between 1000 - 30000ms 
   *                 inclusive. The default is 30000 ms.
   * @param {string} options.callback_method - 'advanced' only.
   *                 The HTTP method used to send the Number Insight Return 
   *                 Parameters to callback. Must be GET or POST. The default 
   *                 value is GET.
   * @param {string} options.client_ref - 'advanced' only.
   *                 A 40 character reference string returned in the Number 
   *                 Insight Return Parameters. This may be useful for your 
   *                 internal reports.
   * @param {string} options['include-intermediate-callbacks'] - 'advanced' only.
   *                 Tells the Nexmo platform to make callbacks as soon as an 
   *                 individual piece of information is retrieved.
   */


  _createClass(NumberInsight, [{
    key: 'get',
    value: function get(options, callback) {
      var level = options.level;
      // remove 'level' as it's a library-only parameter
      delete options.level;

      if (level === 'advanced') {
        this._nexmo.numberInsight.apply(this._nexmo, arguments);
      } else if (level === 'standard') {
        this._nexmo.numberInsightStandard.apply(this._nexmo, arguments);
      } else {
        this._nexmo.numberInsightBasic.apply(this._nexmo, arguments);
      }
    }
  }]);

  return NumberInsight;
}();

exports.default = NumberInsight;
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9OdW1iZXJJbnNpZ2h0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztBQUVBOzs7Ozs7OztJQUVNLGE7Ozs7Ozs7OztBQVFKLHlCQUFZLFdBQVosRUFBdUM7QUFBQSxRQUFkLE9BQWMseURBQUosRUFBSTs7QUFBQTs7QUFDckMsU0FBSyxLQUFMLEdBQWEsV0FBYjtBQUNBLFNBQUssT0FBTCxHQUFlLE9BQWY7OztBQUdBLFNBQUssTUFBTCxHQUFjLEtBQUssT0FBTCxDQUFhLGFBQWIsbUJBQWQ7O0FBRUEsU0FBSyxNQUFMLENBQVksVUFBWixDQUF1QixLQUFLLEtBQUwsQ0FBVyxNQUFsQyxFQUEwQyxLQUFLLEtBQUwsQ0FBVyxTQUFyRCxFQUFnRSxLQUFLLE9BQXJFO0FBQ0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBZ0RHLE8sRUFBUyxRLEVBQVU7QUFDckIsVUFBSSxRQUFRLFFBQVEsS0FBcEI7O0FBRUEsYUFBTyxRQUFRLEtBQWY7O0FBRUEsVUFBRyxVQUFVLFVBQWIsRUFBeUI7QUFDdkIsYUFBSyxNQUFMLENBQVksYUFBWixDQUEwQixLQUExQixDQUFnQyxLQUFLLE1BQXJDLEVBQTZDLFNBQTdDO0FBQ0QsT0FGRCxNQUdLLElBQUcsVUFBVSxVQUFiLEVBQXlCO0FBQzVCLGFBQUssTUFBTCxDQUFZLHFCQUFaLENBQWtDLEtBQWxDLENBQXdDLEtBQUssTUFBN0MsRUFBcUQsU0FBckQ7QUFDRCxPQUZJLE1BR0E7QUFDSCxhQUFLLE1BQUwsQ0FBWSxrQkFBWixDQUErQixLQUEvQixDQUFxQyxLQUFLLE1BQTFDLEVBQWtELFNBQWxEO0FBQ0Q7QUFDRjs7Ozs7O2tCQUlZLGEiLCJmaWxlIjoiTnVtYmVySW5zaWdodC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgbmV4bW8gZnJvbSAnLi9pbmRleCc7XG5cbmNsYXNzIE51bWJlckluc2lnaHQge1xuICBcbiAgLyoqXG4gICAqIEBwYXJhbSB7Q3JlZGVudGlhbHN9IGNyZWRlbnRpYWxzXG4gICAqICAgIGNyZWRlbnRpYWxzIHRvIGJlIHVzZWQgd2hlbiBpbnRlcmFjdGluZyB3aXRoIHRoZSBBUEkuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqICAgIEFkZGl0aW9uIE51bWJlckluc2lnaHQgb3B0aW9ucy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGNyZWRlbnRpYWxzLCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLmNyZWRzID0gY3JlZGVudGlhbHM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICBcbiAgICAvLyBVc2VkIHRvIGZhY2lsaXRhdGUgdGVzdGluZyBvZiB0aGUgY2FsbCB0byB0aGUgdW5kZXJseWluZyBvYmplY3RcbiAgICB0aGlzLl9uZXhtbyA9IHRoaXMub3B0aW9ucy5uZXhtb092ZXJyaWRlIHx8IG5leG1vO1xuICAgIFxuICAgIHRoaXMuX25leG1vLmluaXRpYWxpemUodGhpcy5jcmVkcy5hcGlLZXksIHRoaXMuY3JlZHMuYXBpU2VjcmV0LCB0aGlzLm9wdGlvbnMpO1xuICB9XG4gIFxuICAvKipcbiAgICogR2V0IGluc2lnaHQgb24gdGhlIHByb3ZpZGVkIG51bWJlci5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgb3B0aW9ucyBmb3IgTnVtYmVyIEluc2lnaHRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubGV2ZWwgLSB0aGUgbGV2ZWwgb2YgaW5zaWdodDogJ2Jhc2ljJywgJ3N0YW5kYXJkJ1xuICAgKiAgICAgICAgICAgICAgICAgb3IgJ2FkdmFuY2VkJy5cbiAgICogICAgICAgICAgICAgICAgIElmIG5vIGBsZXZlbGAgdmFsdWUgaXMgcHJvdmlkZWQsIG9yIGFuIHVucmVjb2duaXNlZCB2YWx1ZVxuICAgKiAgICAgICAgICAgICAgICAgaXMgdXNlZCwgJ2Jhc2ljJyBsZXZlbCBpbnNpZ2h0IHdpbGwgYmUgdXNlZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubnVtYmVyIC0gdGhlIHBob25lIG51bWJlciB0byByZXRyaWV2ZSBpbnNpZ2h0IG9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmNvdW50cnkgLSAnYmFzaWMnIGFuZCAnc3RhbmRhcmQnIG9ubHkuXG4gICAqICAgICAgICAgICAgICAgICBBbiBJU08gMzE2NiBBbHBoYSAyIGNvdW50cnkgY29kZVxuICAgKiAgICAgICAgICAgICAgICAgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzMxNjYtMV9hbHBoYS0yXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLiBpcCAtICdhZHZhbmNlZCcgb25seS5cbiAgICogICAgICAgICAgICAgICAgIFRoZSBJUCBhZGRyZXNzIGluIElQdjQgbm90YXRpb24gb2YgdGhlIGVuZHBvaW50IHRoZSBcbiAgICogICAgICAgICAgICAgICAgIHVzZXIgY29ubmVjdGVkIGZyb20uXG4gICAqIEBwYXJhbSB7QXJyYXl9ICBvcHRpb25zLmZlYXR1cmVzIC0gJ2FkdmFuY2VkJyBvbmx5LlxuICAgKiAgICAgICAgICAgICAgICAgQW4gQXJyYXkgZGV0YWlsaW5nIHRoZSBpbmZvcm1hdGlvbiB5b3Ugd2FudCBmb3IgdGhpcyBwaG9uZSBcbiAgICogICAgICAgICAgICAgICAgIG51bWJlci4gUG9zc2libGUgQXJyYXkgZWxlbWVudHMgYXJlOlxuICAgKiAgICAgICAgICAgICAgICAgLSB0eXBlOiBudW1iZXIgaXMgb25lIG9mIHRoZSBmb2xsb3dpbmc6IG1vYmlsZSwgbGFuZGxpbmUsXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBsYW5kbGluZV9wcmVtaXVtIG9yIHVua25vd24gcGhvbmUgbnVtYmVyLlxuICAgKiAgICAgICAgICAgICAgICAgLSB2YWxpZDogbnVtYmVyIGV4aXN0cy5cbiAgICogICAgICAgICAgICAgICAgIC0gcmVhY2hhYmxlOiBpcyBudW1iZXIgYXZhaWxhYmxlIG5vdy5cbiAgICogICAgICAgICAgICAgICAgIC0gY2FycmllcjogdGhlIE1DQ01OQyBmb3IgdGhlIGNhcnJpZXIgbnVtYmVyIGlzIHJlZ2lzdGVyZWRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGguIFRoaXMgaXMgZWl0aGVyOiA8SVNPIGNvdW50cnkgY29kZT4tRklYRUQgXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciA8SVNPIGNvdW50cnkgY29kZT4tUFJFTUlVTS5cbiAgICogICAgICAgICAgICAgICAgIC0gcG9ydGVkOiBpZiB0aGUgdXNlciBoYXMgY2hhbmdlZCBjYXJyaWVyIGZvciBudW1iZXIuXG4gICAqICAgICAgICAgICAgICAgICAtIHJvYW1pbmc6IHRoZSBzdWJzY3JpYmVyIGlzIG91dHNpZGUgdGhlaXIgaG9tZSBuZXR3b3JrXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5jYWxsYmFjayAtICdhZHZhbmNlZCcgb25seS5cbiAgICogICAgICAgICAgICAgICAgIFRoZSBjYWxsYmFjayB0byBiZSBjYWxsZWQgd2hlbiB0aGUgQVBJIGNhbGwgY29tcGxldGVzLlxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5jYWxsYmFja190aW1lb3V0IC0gJ2FkdmFuY2VkJyBvbmx5LlxuICAgKiAgICAgICAgICAgICAgICAgVGhlIG1heGltdW0gd2FpdCB1bnRpbCB0aGUgTnVtYmVyIEluc2lnaHQgUmV0dXJuIFBhcmFtZXRlcnNcbiAgICogICAgICAgICAgICAgICAgIGFyZSBzZW50IHRvIGNhbGxiYWNrLiBUaGlzIGlzIGEgdmFsdWUgYmV0d2VlbiAxMDAwIC0gMzAwMDBtcyBcbiAgICogICAgICAgICAgICAgICAgIGluY2x1c2l2ZS4gVGhlIGRlZmF1bHQgaXMgMzAwMDAgbXMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmNhbGxiYWNrX21ldGhvZCAtICdhZHZhbmNlZCcgb25seS5cbiAgICogICAgICAgICAgICAgICAgIFRoZSBIVFRQIG1ldGhvZCB1c2VkIHRvIHNlbmQgdGhlIE51bWJlciBJbnNpZ2h0IFJldHVybiBcbiAgICogICAgICAgICAgICAgICAgIFBhcmFtZXRlcnMgdG8gY2FsbGJhY2suIE11c3QgYmUgR0VUIG9yIFBPU1QuIFRoZSBkZWZhdWx0IFxuICAgKiAgICAgICAgICAgICAgICAgdmFsdWUgaXMgR0VULlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5jbGllbnRfcmVmIC0gJ2FkdmFuY2VkJyBvbmx5LlxuICAgKiAgICAgICAgICAgICAgICAgQSA0MCBjaGFyYWN0ZXIgcmVmZXJlbmNlIHN0cmluZyByZXR1cm5lZCBpbiB0aGUgTnVtYmVyIFxuICAgKiAgICAgICAgICAgICAgICAgSW5zaWdodCBSZXR1cm4gUGFyYW1ldGVycy4gVGhpcyBtYXkgYmUgdXNlZnVsIGZvciB5b3VyIFxuICAgKiAgICAgICAgICAgICAgICAgaW50ZXJuYWwgcmVwb3J0cy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnNbJ2luY2x1ZGUtaW50ZXJtZWRpYXRlLWNhbGxiYWNrcyddIC0gJ2FkdmFuY2VkJyBvbmx5LlxuICAgKiAgICAgICAgICAgICAgICAgVGVsbHMgdGhlIE5leG1vIHBsYXRmb3JtIHRvIG1ha2UgY2FsbGJhY2tzIGFzIHNvb24gYXMgYW4gXG4gICAqICAgICAgICAgICAgICAgICBpbmRpdmlkdWFsIHBpZWNlIG9mIGluZm9ybWF0aW9uIGlzIHJldHJpZXZlZC5cbiAgICovXG4gIGdldChvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIHZhciBsZXZlbCA9IG9wdGlvbnMubGV2ZWw7XG4gICAgLy8gcmVtb3ZlICdsZXZlbCcgYXMgaXQncyBhIGxpYnJhcnktb25seSBwYXJhbWV0ZXJcbiAgICBkZWxldGUgb3B0aW9ucy5sZXZlbDtcbiAgICBcbiAgICBpZihsZXZlbCA9PT0gJ2FkdmFuY2VkJykge1xuICAgICAgdGhpcy5fbmV4bW8ubnVtYmVySW5zaWdodC5hcHBseSh0aGlzLl9uZXhtbywgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgZWxzZSBpZihsZXZlbCA9PT0gJ3N0YW5kYXJkJykge1xuICAgICAgdGhpcy5fbmV4bW8ubnVtYmVySW5zaWdodFN0YW5kYXJkLmFwcGx5KHRoaXMuX25leG1vLCBhcmd1bWVudHMpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuX25leG1vLm51bWJlckluc2lnaHRCYXNpYy5hcHBseSh0aGlzLl9uZXhtbywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH1cbiAgXG59XG5cbmV4cG9ydCBkZWZhdWx0IE51bWJlckluc2lnaHQ7XG4iXX0=